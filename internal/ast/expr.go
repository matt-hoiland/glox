// Code generated by tools/generate-ast. DO NOT EDIT.
package ast

import (
	"github.com/matt-hoiland/glox/internal/loxtype"
	"github.com/matt-hoiland/glox/internal/token"
)

type Expr interface {
	Accept(ExprVisitor) (loxtype.Type, error)
}

type ExprVisitor interface {
	VisitBinaryExpr(*BinaryExpr) (loxtype.Type, error)
	VisitGroupingExpr(*GroupingExpr) (loxtype.Type, error)
	VisitLiteralExpr(*LiteralExpr) (loxtype.Type, error)
	VisitUnaryExpr(*UnaryExpr) (loxtype.Type, error)
}

type BinaryExpr struct {
	Left     Expr
	Operator *token.Token
	Right    Expr
}

var _ Expr = (*BinaryExpr)(nil)

func NewBinaryExpr(Left Expr, Operator *token.Token, Right Expr) *BinaryExpr {
	return &BinaryExpr{
		Left:     Left,
		Operator: Operator,
		Right:    Right,
	}
}

func (e *BinaryExpr) Accept(visitor ExprVisitor) (loxtype.Type, error) {
	return visitor.VisitBinaryExpr(e)
}

type GroupingExpr struct {
	Expression Expr
}

var _ Expr = (*GroupingExpr)(nil)

func NewGroupingExpr(Expression Expr) *GroupingExpr {
	return &GroupingExpr{
		Expression: Expression,
	}
}

func (e *GroupingExpr) Accept(visitor ExprVisitor) (loxtype.Type, error) {
	return visitor.VisitGroupingExpr(e)
}

type LiteralExpr struct {
	Value loxtype.Type
}

var _ Expr = (*LiteralExpr)(nil)

func NewLiteralExpr(Value loxtype.Type) *LiteralExpr {
	return &LiteralExpr{
		Value: Value,
	}
}

func (e *LiteralExpr) Accept(visitor ExprVisitor) (loxtype.Type, error) {
	return visitor.VisitLiteralExpr(e)
}

type UnaryExpr struct {
	Operator *token.Token
	Right    Expr
}

var _ Expr = (*UnaryExpr)(nil)

func NewUnaryExpr(Operator *token.Token, Right Expr) *UnaryExpr {
	return &UnaryExpr{
		Operator: Operator,
		Right:    Right,
	}
}

func (e *UnaryExpr) Accept(visitor ExprVisitor) (loxtype.Type, error) {
	return visitor.VisitUnaryExpr(e)
}
