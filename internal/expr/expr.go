// Code generated by tools/generate-ast. DO NOT EDIT.
package expr

import (
	"github.com/matt-hoiland/glox/internal/loxtype"
	"github.com/matt-hoiland/glox/internal/token"
)

type Expr interface {
	Accept(Visitor) (loxtype.Type, error)
}

type Visitor interface {
	VisitBinary(*Binary) (loxtype.Type, error)
	VisitGrouping(*Grouping) (loxtype.Type, error)
	VisitLiteral(*Literal) (loxtype.Type, error)
	VisitUnary(*Unary) (loxtype.Type, error)
}

type Binary struct {
	Left     Expr
	Operator *token.Token
	Right    Expr
}

var _ Expr = (*Binary)(nil)

func NewBinary(Left Expr, Operator *token.Token, Right Expr) *Binary {
	return &Binary{
		Left:     Left,
		Operator: Operator,
		Right:    Right,
	}
}

func (e *Binary) Accept(visitor Visitor) (loxtype.Type, error) {
	return visitor.VisitBinary(e)
}

type Grouping struct {
	Expression Expr
}

var _ Expr = (*Grouping)(nil)

func NewGrouping(Expression Expr) *Grouping {
	return &Grouping{
		Expression: Expression,
	}
}

func (e *Grouping) Accept(visitor Visitor) (loxtype.Type, error) {
	return visitor.VisitGrouping(e)
}

type Literal struct {
	Value loxtype.Type
}

var _ Expr = (*Literal)(nil)

func NewLiteral(Value loxtype.Type) *Literal {
	return &Literal{
		Value: Value,
	}
}

func (e *Literal) Accept(visitor Visitor) (loxtype.Type, error) {
	return visitor.VisitLiteral(e)
}

type Unary struct {
	Operator *token.Token
	Right    Expr
}

var _ Expr = (*Unary)(nil)

func NewUnary(Operator *token.Token, Right Expr) *Unary {
	return &Unary{
		Operator: Operator,
		Right:    Right,
	}
}

func (e *Unary) Accept(visitor Visitor) (loxtype.Type, error) {
	return visitor.VisitUnary(e)
}
