package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io"
	"os"
	"path"
	"strings"

	"github.com/matt-hoiland/glox/internal/constants/exit"
)

func main() {
	if len(os.Args) != 2 {
		fmt.Fprintln(os.Stderr, "Usage: generate-ast <output director>")
		os.Exit(exit.Usage)
	}
	outputDir := os.Args[1]
	defineAST(outputDir, "Expr",
		"Binary   : Left Expr[R], Operator *scanner.Token, Right Expr[R]",
		"Grouping : Expression Expr[R]",
		"Literal  : Value Value",
		"Unary    : Operator *scanner.Token, Right Expr[R]",
	)
}

func defineAST(outputDir, baseName string, productions ...string) {
	w := &bytes.Buffer{}

	fmt.Fprintf(w, "// Code generated by tools/generate-ast. DO NOT EDIT.\n")
	fmt.Fprintln(w, "package expr")
	fmt.Fprintln(w)
	fmt.Fprintln(w, "import (")
	fmt.Fprintln(w, `	"fmt"`)
	fmt.Fprintln(w)
	fmt.Fprintln(w, `	"github.com/matt-hoiland/glox/internal/scanner"`)
	fmt.Fprintln(w, ")")
	fmt.Fprintln(w)
	fmt.Fprintln(w, "type "+baseName+"[R any] interface {")
	fmt.Fprintln(w, `	Accept(Visitor[R]) R`)
	fmt.Fprintln(w, "}")
	fmt.Fprintln(w)
	fmt.Fprintln(w, `type Value interface {`)
	fmt.Fprintln(w, `	fmt.Stringer`)
	fmt.Fprintln(w, `}`)
	fmt.Fprintln(w)
	defineVisitor(w, baseName, productions...)
	fmt.Fprintln(w)
	for _, production := range productions {
		typeName := strings.TrimSpace(strings.Split(production, ":")[0])
		fields := strings.TrimSpace(strings.Split(production, ":")[1])
		defineType(w, baseName, typeName, fields)
	}

	data, err := format.Source(w.Bytes())
	if err != nil {
		panic(err)
	}

	path := path.Join(outputDir, strings.ToLower(baseName)+".go")
	if err := os.MkdirAll(outputDir, 0755); err != nil {
		panic(err)
	}
	if err := os.WriteFile(path, data, 0755); err != nil {
		panic(err)
	}
}

func defineType(w io.Writer, baseName, typeName, fieldList string) {
	fmt.Fprintf(w, "type %s[R any] struct {\n", typeName)
	for field := range strings.SplitSeq(fieldList, ",") {
		fmt.Fprintf(w, "\t%s\n", strings.TrimSpace(field))
	}
	fmt.Fprintln(w, "}")
	fmt.Fprintln(w)
	fmt.Fprintf(w, "var _ %s[any] = (*%s[any])(nil)\n", baseName, typeName)
	fmt.Fprintln(w)
	fmt.Fprintf(w, "func New%s[R any](%s) *%s[R] {\n", typeName, fieldList, typeName)
	fmt.Fprintf(w, "\treturn &%s[R]{\n", typeName)
	for fieldPair := range strings.SplitSeq(fieldList, ",") {
		field := strings.TrimSpace(strings.Split(strings.TrimSpace(fieldPair), " ")[0])
		fmt.Fprintf(w, "\t%s: %s,\n", field, field)
	}
	fmt.Fprintln(w, "\t}")
	fmt.Fprintln(w, "}")
	fmt.Fprintln(w)
	fmt.Fprintf(w, "func (e *%s[R]) Accept(visitor Visitor[R]) R {\n", typeName)
	fmt.Fprintf(w, "\treturn visitor.Visit%s(e)\n", typeName)
	fmt.Fprintln(w, "}")
	fmt.Fprintln(w)
}

func defineVisitor(w io.Writer, _ string, productions ...string) {
	fmt.Fprintln(w, `type Visitor[R any] interface {`)
	for _, production := range productions {
		typeName := strings.TrimSpace(strings.Split(production, ":")[0])
		fmt.Fprintf(w, "\tVisit%s(*%s[R]) R\n", typeName, typeName)
	}
	fmt.Fprintln(w, `}`)
}
